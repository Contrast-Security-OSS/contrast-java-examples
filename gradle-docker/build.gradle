import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id "application"
    id "com.github.sherter.google-java-format" version "0.9"
    id "com.bmuschko.docker-remote-api" version "9.2.1"
}

repositories {
    mavenCentral()
}

sourceSets {
    intTest {}
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}


dependencies {
    implementation "org.glassfish.grizzly:grizzly-http-server:2.4.4"

    testImplementation platform("org.junit:junit-bom:5.9.2")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    testImplementation "org.mockito:mockito-core:2.25.1"

    intTestImplementation platform("org.junit:junit-bom:5.9.2")
    intTestImplementation "org.junit.jupiter:junit-jupiter-api"
    intTestRuntimeOnly "org.junit.platform:junit-platform-launcher"
    intTestImplementation "org.junit.jupiter:junit-jupiter-engine"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

application {
    mainClassName = "com.contrastsecurity.examples.grizzly.App"
}

task createDockerfile(type: Dockerfile) {
    from("eclipse-temurin:19")
    workingDir("/")
    environmentVariable("CONTRAST_GRADLE_BIND_ADDR", "0.0.0.0")
    addFile("${distTar.archiveFileName.get()}", "/")
    workingDir("${project.name}")
    entryPoint("bin/${project.name}")
    exposePort(8080)

    // Add the Contrast Agent and configure the application to use it here, in step 8
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    dependsOn "copyDist"
}

task copyDist(type: Copy) {
    from distTar
    into buildDockerImage.inputDir
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId buildDockerImage.getImageId()
    hostConfig.portBindings = ['8080:8080']

    // add Contrast configuration here in Step 9
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}

task removeContainer(type: DockerRemoveContainer) {
    removeVolumes = true
    force = true
    targetContainerId startContainer.getContainerId()
}

task integrationTest(type: Test) {
    description = "Test the application distributable."

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    useJUnitPlatform()

    dependsOn startContainer
    finalizedBy removeContainer
}

assemble.dependsOn integrationTest

test {
    useJUnitPlatform()
}

verifyGoogleJavaFormat {
    // ignore formatting errors in order to simplify the how-to
    ignoreFailures true
}
